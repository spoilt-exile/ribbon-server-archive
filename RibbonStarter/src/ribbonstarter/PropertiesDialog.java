/**
* This file is part of RibbonStarter application (check README).
* Copyright (C) 2023 Stanislav Nepochatov
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
**/

package ribbonstarter;

import java.util.Objects;
import java.util.Properties;

/**
 * Server properties editing dialog
 * @author Stanislav Nepochatov
 */
public class PropertiesDialog extends javax.swing.JDialog {
    
    private final static String PROPERTIES_FILE = "server.properties";
    
    private final static String BASE_PATH_KEY = "base_path";
    
    private final static String NETWORKING_PORT_KEY = "networking_port";
    private final static String NETWORKING_PORT_DEF = "3003";
    private final static String NETWORKING_ALLOW_REMOTE_KEY = "networking_allow_remote";
    private final static String NETWORKING_ALLOW_REMOTE_DEF = "1";
    private final static String NETWORKING_MAX_CONNECTIONS_KEY = "networking_max_connections";
    private final static String NETWORKING_MAX_CONNECTIONS_DEF = "-1";
    
    private final static String ACCESS_ALL_MASK_KEY = "access_all_mask";
    private final static String ACCESS_ALL_MASK_DEF = "100";
    private final static String[] ACCESS_ALL_MASK_VALUES = new String[] { "000", "100", "110", "111" };
    private final static String ACCESS_ALLOW_MULTIPLIE_LOGIN_KEY = "access_allow_multiplie_login";
    private final static String ACCESS_ALLOW_MULTIPLIE_LOGIN_DEF = "0";
    private final static String ACCESS_ENABLE_SESSIONS_KEY = "access_enable_sessions";
    private final static String ACCESS_ENABLE_SESSIONS_DEF = "1";
    private final static String ACCESS_SESSION_COUNT_MAX_KEY = "access_session_count_max";
    private final static String ACCESS_SESSION_COUNT_MAX_DEF = "10";
    private final static String ACCESS_ALLOW_REMOTE_KEY = "access_allow_remote";
    private final static String ACCESS_ALLOW_REMOTE_DEF = "0";
    private final static String ACCESS_REMOTE_GROUP_KEY = "access_remote_group";
    private final static String ACCESS_REMOTE_GROUP_DEF = "ADM";
    
    private final static String IO_ENABLED_KEY = "io_enabled";
    private final static String IO_ENABLED_DEF = "1";
    private final static String IO_IGNORE_DIRTY_KEY = "io_ignore_dirty";
    private final static String IO_IGNORE_DIRTY_DEF = "1";
    private final static String IO_IMPORT_EM_DIR_KEY = "io_import_em_dir";
    private final static String IO_IMPORT_EM_DIR_DEF = "СИСТЕМА.Загублене";
    
    private final static String DEBUG_POST_EXCEPTIONS_KEY = "debug_post_exceptions";
    private final static String DEBUG_POST_EXCEPTIONS_DEF = "1";
    private final static String DEBUG_POST_DIR_KEY = "debug_post_dir";
    private final static String DEBUG_POST_DIR_DEF = "СИСТЕМА.Помилки";
    
    private final static String OPT_POST_INIT_KEY = "opt_post_init";
    private final static String OPT_POST_INIT_DEF = "1";
    private final static String OPT_CREATE_REPORTS_KEY = "opt_create_reports";
    private final static String OPT_CREATE_REPORTS_DEF = "1";
    
    /**
     * Creates new form PropertiesDialog
     */
    public PropertiesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        errorLabel.setVisible(false);
        initProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        basePathTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        networkingPortSpinner = new javax.swing.JSpinner();
        networkingAllowRemoteCheckbox = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        networkingMaxConnectionSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        accessAllMaskComboBox = new javax.swing.JComboBox<>();
        accessAllowMiltipleLoginCheckBox = new javax.swing.JCheckBox();
        accessEnableSessionCheckBox = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        accessSessionCountMaxSpinner = new javax.swing.JSpinner();
        accessAllowRemoteCheckBox = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        accessRemoteGroupTextField = new javax.swing.JTextField();
        ioEnabledCheckBox = new javax.swing.JCheckBox();
        ioIgnoreDirtyCheckBox = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        ioImportEmDirTextField = new javax.swing.JTextField();
        debugPostExceptionsCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        debugPostDirTextField = new javax.swing.JTextField();
        optPostInitCheckBox = new javax.swing.JCheckBox();
        optCreateReportsCheckBox = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Шлях до бази \"Стрічки\"");

        jLabel2.setText("Мережевий порт");

        networkingAllowRemoteCheckbox.setText("З'єднання зовні");
        networkingAllowRemoteCheckbox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel3.setText("Ліміт з'єднаннь");

        jLabel4.setText("Дозволи групи ALL");

        accessAllMaskComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(ACCESS_ALL_MASK_VALUES));

        accessAllowMiltipleLoginCheckBox.setText("Багаторозовий логін");
        accessAllowMiltipleLoginCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        accessEnableSessionCheckBox.setText("Сесії");
        accessEnableSessionCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        accessEnableSessionCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessEnableSessionCheckBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Кількість використань сесій");

        accessAllowRemoteCheckBox.setText("Видалений режим доступу");
        accessAllowRemoteCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        accessAllowRemoteCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessAllowRemoteCheckBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Група видаленого режиму");

        ioEnabledCheckBox.setText("Імпорт/Експорт");
        ioEnabledCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        ioEnabledCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ioEnabledCheckBoxActionPerformed(evt);
            }
        });

        ioIgnoreDirtyCheckBox.setText("Ігнорувати помилки");
        ioIgnoreDirtyCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel7.setText("Аварійний напрямок");

        debugPostExceptionsCheckBox.setText("Випуск помилок");
        debugPostExceptionsCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        debugPostExceptionsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugPostExceptionsCheckBoxActionPerformed(evt);
            }
        });

        jLabel8.setText("Напрямок");

        optPostInitCheckBox.setText("Випускати привітання");
        optPostInitCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        optCreateReportsCheckBox.setText("Створювати репорти");
        optCreateReportsCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        cancelButton.setText("Відміна");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Зберігти");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("PT Sans", 1, 19)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(204, 0, 0));
        errorLabel.setText("ERROR");
        errorLabel.setFocusable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(basePathTextField)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(accessAllowRemoteCheckBox)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(accessRemoteGroupTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ioEnabledCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ioIgnoreDirtyCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ioImportEmDirTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(accessAllMaskComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(accessAllowMiltipleLoginCheckBox))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(networkingPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(networkingAllowRemoteCheckbox)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3)))
                                .addGap(18, 18, 18)
                                .addComponent(networkingMaxConnectionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(accessEnableSessionCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(accessSessionCountMaxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(debugPostExceptionsCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(debugPostDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(optPostInitCheckBox)
                                .addGap(18, 18, 18)
                                .addComponent(optCreateReportsCheckBox)))
                        .addGap(0, 99, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(basePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(networkingPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(networkingMaxConnectionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(networkingAllowRemoteCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(accessAllMaskComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accessAllowMiltipleLoginCheckBox))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accessEnableSessionCheckBox)
                    .addComponent(jLabel5)
                    .addComponent(accessSessionCountMaxSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accessAllowRemoteCheckBox)
                    .addComponent(jLabel6)
                    .addComponent(accessRemoteGroupTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ioEnabledCheckBox)
                    .addComponent(ioIgnoreDirtyCheckBox)
                    .addComponent(jLabel7)
                    .addComponent(ioImportEmDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debugPostExceptionsCheckBox)
                    .addComponent(jLabel8)
                    .addComponent(debugPostDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(optPostInitCheckBox)
                    .addComponent(optCreateReportsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton)
                    .addComponent(errorLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        errorLabel.setVisible(false);
        Properties props = renderProperties();
        try (java.io.FileOutputStream propertyStoreStream = new java.io.FileOutputStream(new java.io.File(System.getProperty("user.dir") + "/server.properties"))) {
            props.store(propertyStoreStream, "Server config genereated by RibbonStarter");
            this.dispose();
        } catch (java.io.IOException ex) {
            errorLabel.setVisible(true);
            errorLabel.setText("Помилка: " + ex.getMessage());
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void accessEnableSessionCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessEnableSessionCheckBoxActionPerformed
        accessSessionCountMaxSpinner.setEnabled(accessEnableSessionCheckBox.getModel().isSelected());
    }//GEN-LAST:event_accessEnableSessionCheckBoxActionPerformed

    private void accessAllowRemoteCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessAllowRemoteCheckBoxActionPerformed
        accessRemoteGroupTextField.setEnabled(accessAllowRemoteCheckBox.getModel().isSelected());
    }//GEN-LAST:event_accessAllowRemoteCheckBoxActionPerformed

    private void ioEnabledCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ioEnabledCheckBoxActionPerformed
        final Boolean selected = ioEnabledCheckBox.getModel().isSelected();
        ioIgnoreDirtyCheckBox.setEnabled(selected);
        ioImportEmDirTextField.setEnabled(selected);
    }//GEN-LAST:event_ioEnabledCheckBoxActionPerformed

    private void debugPostExceptionsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugPostExceptionsCheckBoxActionPerformed
        debugPostDirTextField.setEnabled(debugPostExceptionsCheckBox.getModel().isSelected());
    }//GEN-LAST:event_debugPostExceptionsCheckBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PropertiesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PropertiesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PropertiesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PropertiesDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PropertiesDialog dialog = new PropertiesDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    private void initProperties() {
        Properties serverProperties = new java.util.Properties();
        try (java.io.FileInputStream propertyStream = new java.io.FileInputStream(new java.io.File(System.getProperty("user.dir") + "/server.properties"))) {
            serverProperties.load(propertyStream);
        } catch (java.io.FileNotFoundException ex) {
            //Do nothing
        } catch (java.io.IOException fex) {
            //Do nothing
        }
        
        basePathTextField.setText(extractStringFromProperties(serverProperties, BASE_PATH_KEY));
        networkingPortSpinner.setValue(extractIntegerFromProperties(serverProperties, 
                NETWORKING_PORT_KEY, NETWORKING_PORT_DEF));
        networkingAllowRemoteCheckbox.setSelected(extractBooleanFromProperties(serverProperties, 
                NETWORKING_ALLOW_REMOTE_KEY, NETWORKING_ALLOW_REMOTE_DEF));
        networkingMaxConnectionSpinner.setValue(extractIntegerFromProperties(serverProperties, 
                NETWORKING_MAX_CONNECTIONS_KEY, NETWORKING_MAX_CONNECTIONS_DEF));
        
        initAccessAllMaskComboBox(serverProperties);
        accessAllowMiltipleLoginCheckBox.setSelected(extractBooleanFromProperties(serverProperties, 
                ACCESS_ALLOW_MULTIPLIE_LOGIN_KEY, ACCESS_ALLOW_MULTIPLIE_LOGIN_DEF));
        final Boolean accessEnabledSessionsVal = extractBooleanFromProperties(serverProperties, 
                ACCESS_ENABLE_SESSIONS_KEY, ACCESS_ENABLE_SESSIONS_DEF);
        accessEnableSessionCheckBox.setSelected(accessEnabledSessionsVal);
        accessSessionCountMaxSpinner.setValue(extractIntegerFromProperties(serverProperties, 
                ACCESS_SESSION_COUNT_MAX_KEY, ACCESS_SESSION_COUNT_MAX_DEF));
        accessSessionCountMaxSpinner.setEnabled(accessEnabledSessionsVal);
        final Boolean accessAllowRemoteVal = extractBooleanFromProperties(serverProperties, 
                ACCESS_ALLOW_REMOTE_KEY, ACCESS_ALLOW_REMOTE_DEF);
        accessAllowRemoteCheckBox.setSelected(accessAllowRemoteVal);
        accessRemoteGroupTextField.setEnabled(accessAllowRemoteVal);
        accessRemoteGroupTextField.setText(extractStringFromPropertiesDef(serverProperties, 
                ACCESS_REMOTE_GROUP_KEY, ACCESS_REMOTE_GROUP_DEF));
        
        final Boolean ioEnabledVal = extractBooleanFromProperties(serverProperties, 
                IO_ENABLED_KEY, IO_ENABLED_DEF);
        ioEnabledCheckBox.setSelected(ioEnabledVal);
        ioIgnoreDirtyCheckBox.setSelected(extractBooleanFromProperties(serverProperties, 
                IO_IGNORE_DIRTY_KEY, IO_IGNORE_DIRTY_DEF));
        ioIgnoreDirtyCheckBox.setEnabled(ioEnabledVal);
        ioImportEmDirTextField.setText(extractStringFromPropertiesDef(serverProperties, 
                IO_IMPORT_EM_DIR_KEY, IO_IMPORT_EM_DIR_DEF));
        ioImportEmDirTextField.setEnabled(ioEnabledVal);
        
        final Boolean debugPostExceptionsVal = extractBooleanFromProperties(serverProperties, 
                DEBUG_POST_EXCEPTIONS_KEY, DEBUG_POST_EXCEPTIONS_DEF);
        debugPostExceptionsCheckBox.setSelected(debugPostExceptionsVal);
        debugPostDirTextField.setText(extractStringFromPropertiesDef(serverProperties, 
                DEBUG_POST_DIR_KEY, DEBUG_POST_DIR_DEF));
        
        optPostInitCheckBox.setSelected(extractBooleanFromProperties(serverProperties, 
                OPT_POST_INIT_KEY, OPT_POST_INIT_DEF));
        optCreateReportsCheckBox.setSelected(extractBooleanFromProperties(serverProperties, 
                OPT_CREATE_REPORTS_KEY, OPT_CREATE_REPORTS_DEF));
    }
    
    private String extractStringFromPropertiesDef(Properties props, String key, String defValue) {
        String extracted = extractStringFromProperties(props, key);
        return extracted == null ? defValue : extracted;
    }
    
    private String extractStringFromProperties(Properties props, String key) {
        try {
            return new String(props.getProperty(key).getBytes("ISO-8859-1"), "UTF-8");
        } catch (Exception ex) {
            return null;
        }
    }
    
    private Integer extractIntegerFromProperties(Properties props, String key, String defValue) {
        return Integer.valueOf((String) props.getProperty(key, defValue));
    }
    
    private Boolean extractBooleanFromProperties(Properties props, String key, String defValue) {
        String flagStr = (String) props.getProperty(key, defValue);
        switch (flagStr) {
            case "0":
                return false;
            case "1":
                return true;
            default:
                return false;
        }
    }
    
    private void initAccessAllMaskComboBox(Properties props) {
        String maskStr = (String) props.getProperty(ACCESS_ALL_MASK_KEY, ACCESS_ALL_MASK_DEF);
        
        int maskIndex = -1;
        for(int i = 0; i < ACCESS_ALL_MASK_VALUES.length; i++) {
            if (Objects.equals(maskStr, ACCESS_ALL_MASK_VALUES[i])) {
                maskIndex = i;
                break;
            }
        }
        
        if (maskIndex > -1) {
            accessAllMaskComboBox.setSelectedIndex(maskIndex);
        } else {
            accessAllMaskComboBox.setSelectedIndex(1);
        }
    }
    
    private Properties renderProperties() {
        Properties props = new Properties();
        
        props.put(BASE_PATH_KEY, convertStringToPropString(basePathTextField.getText()));
        props.put(NETWORKING_PORT_KEY, networkingPortSpinner.getValue().toString());
        props.put(NETWORKING_ALLOW_REMOTE_KEY, convertBooleanToPropString(networkingAllowRemoteCheckbox.getModel().isSelected()));
        props.put(NETWORKING_MAX_CONNECTIONS_KEY, networkingMaxConnectionSpinner.getValue().toString());
        
        props.put(ACCESS_ALL_MASK_KEY, accessAllMaskComboBox.getSelectedItem());
        props.put(ACCESS_ALLOW_MULTIPLIE_LOGIN_KEY, convertBooleanToPropString(accessAllowMiltipleLoginCheckBox.getModel().isSelected()));
        props.put(ACCESS_ENABLE_SESSIONS_KEY, convertBooleanToPropString(accessEnableSessionCheckBox.getModel().isSelected()));
        props.put(ACCESS_SESSION_COUNT_MAX_KEY, accessSessionCountMaxSpinner.getValue().toString());
        props.put(ACCESS_ALLOW_REMOTE_KEY, convertBooleanToPropString(accessAllowRemoteCheckBox.getModel().isSelected()));
        props.put(ACCESS_REMOTE_GROUP_KEY, convertStringToPropString(accessRemoteGroupTextField.getText()));
        
        props.put(IO_ENABLED_KEY, convertBooleanToPropString(ioEnabledCheckBox.getModel().isSelected()));
        props.put(IO_IGNORE_DIRTY_KEY, convertBooleanToPropString(ioIgnoreDirtyCheckBox.getModel().isSelected()));
        props.put(IO_IMPORT_EM_DIR_KEY, convertStringToPropString(ioImportEmDirTextField.getText()));
        
        props.put(DEBUG_POST_EXCEPTIONS_KEY, convertBooleanToPropString(debugPostExceptionsCheckBox.getModel().isSelected()));
        props.put(DEBUG_POST_DIR_KEY, convertStringToPropString(debugPostDirTextField.getText()));
        
        props.put(OPT_POST_INIT_KEY, convertBooleanToPropString(optPostInitCheckBox.getModel().isSelected()));
        props.put(OPT_CREATE_REPORTS_KEY, convertBooleanToPropString(optCreateReportsCheckBox.getModel().isSelected()));
        
        return props;
    }
    
    private String convertBooleanToPropString(Boolean flag) {
        return flag ? "1" : "0";
    }
    
    private String convertStringToPropString(String rawString) {
        try {
            return new String(rawString.getBytes(), "ISO-8859-1");
        } catch (Exception ex) {
            return rawString;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> accessAllMaskComboBox;
    private javax.swing.JCheckBox accessAllowMiltipleLoginCheckBox;
    private javax.swing.JCheckBox accessAllowRemoteCheckBox;
    private javax.swing.JCheckBox accessEnableSessionCheckBox;
    private javax.swing.JTextField accessRemoteGroupTextField;
    private javax.swing.JSpinner accessSessionCountMaxSpinner;
    private javax.swing.JTextField basePathTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField debugPostDirTextField;
    private javax.swing.JCheckBox debugPostExceptionsCheckBox;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JCheckBox ioEnabledCheckBox;
    private javax.swing.JCheckBox ioIgnoreDirtyCheckBox;
    private javax.swing.JTextField ioImportEmDirTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JCheckBox networkingAllowRemoteCheckbox;
    private javax.swing.JSpinner networkingMaxConnectionSpinner;
    private javax.swing.JSpinner networkingPortSpinner;
    private javax.swing.JCheckBox optCreateReportsCheckBox;
    private javax.swing.JCheckBox optPostInitCheckBox;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
