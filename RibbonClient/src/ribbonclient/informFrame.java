/**
 * This file is part of RibbonClient application (check README).
 * Copyright (C) 2013 Stanislav Nepochatov
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
**/

package ribbonclient;

/**
 * Message detail information frame;
 * @author Stanislav Nepochatov
 */
public class informFrame extends javax.swing.JDialog {
    
    /**
     * Message to display;
     */
    private MessageClasses.Message currMessage;

    /**
     * Creates new form informFrame
     */
    public informFrame(java.awt.Frame parent, boolean modal, MessageClasses.Message givenMessage) {
        super(parent, modal);
        initComponents();
        currMessage = givenMessage;
        showMessage();
    }
    
    /**
     * Show all messages properties in informFrame
     */
    public void showMessage() {
        this.setTitle("\"Стрічка\" >>> " + currMessage.DATE);
        StringBuffer renderedBuf = new StringBuffer();
        renderedBuf.append("<html>");
        renderedBuf.append("<b>Заголовок:</b> " + currMessage.HEADER + "<br>");
        renderedBuf.append("<b>Автор:</b> " + currMessage.AUTHOR + "<br>");
        renderedBuf.append("<b>Індекс:</b> " + currMessage.INDEX + "<br>");
        if (!currMessage.ORIG_INDEX.equals("-1")) {
            renderedBuf.append("<b>Автор оригіналу:</b> " + currMessage.ORIG_AUTHOR + "<br>");
            renderedBuf.append("<b>Індекс оригіналу:</b> " + currMessage.ORIG_INDEX + "<br>");
        }
        renderedBuf.append("<b>Напрямки:</b> <font color=RED>" + Generic.CsvFormat.renderGroup(currMessage.DIRS) + "</font><br>");
        renderedBuf.append("<b>Теги:</b> <font color=GREEN>" + Generic.CsvFormat.renderGroup(currMessage.TAGS) + "</font><br>");
        renderedBuf.append("<b>Мова повідомлення:</b> " + currMessage.LANG + "<br>");
        renderedBuf.append("<b>Дата повідмолення:</b> " + currMessage.DATE + "<br>");
        if (!currMessage.PROPERTIES.isEmpty()) {
            renderedBuf.append("<br><b>Системні ознаки:</b><br>");
            java.util.ListIterator<MessageClasses.MessageProperty> propIter = currMessage.PROPERTIES.listIterator();
            while (propIter.hasNext()) {
                MessageClasses.MessageProperty currProp = propIter.next();
                renderedBuf.append("[");
                renderedBuf.append(currProp.TYPE + ",");
                renderedBuf.append(currProp.USER + ",");
                renderedBuf.append(currProp.TEXT_MESSAGE + ",");
                renderedBuf.append(currProp.DATE + "]<br>");
            }
            renderedBuf.append("<br>");
        }
        renderedBuf.append("<br>");
        renderedBuf.append(currMessage.CONTENT.replace("\n", "<br>"));
        this.messageArea.setText(renderedBuf.toString());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        messageArea = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        messageArea.setContentType("text/html");
        messageArea.setEditable(false);
        jScrollPane2.setViewportView(messageArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(informFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(informFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(informFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(informFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                informFrame dialog = new informFrame(new javax.swing.JFrame(), true, new MessageClasses.Message());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane messageArea;
    // End of variables declaration//GEN-END:variables
}
